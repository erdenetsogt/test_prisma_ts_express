// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id       Int     @id @default(autoincrement())
  name     String?
  register String  @unique
  contact  String?
  address  String?

  @@map("clients")
}

model Contact {
  id    Int     @id @default(autoincrement())
  value String?
  code  Int?

  @@map("contacts")
}

model Contract {
  id          Int       @id @default(autoincrement())
  pid         Int?
  name        String?
  nr          String?
  clientId    Int?
  amount      BigInt?
  date        DateTime? @db.Date
  paymentterm String?
  enddate     DateTime? @db.Date
  filename    String?
  filesize    BigInt?
  type        Int?
  note        String?
  sell        Boolean?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("contracts")
}

model ContractType {
  id    Int    @id @default(autoincrement())
  type  Int
  value String

  @@map("contractTypes")
}

model Country {
  id    Int     @id @default(autoincrement())
  value String?
  code  String?

  @@map("countries")
}

model Door {
  id        Int     @id @default(autoincrement())
  name      String?
  companyId Int
  ipAddress String?
  company   Company @relation(fields: [companyId], references: [id])

  @@map("doors")
}

model Gender {
  id    Int     @id @default(autoincrement())
  value String?

  @@map("genders")
}

model Language {
  id    Int    @id @default(autoincrement())
  value String

  @@map("languages")
}

model National {
  id    Int     @id @default(autoincrement())
  value String?

  @@map("nationals")
}

model Origin {
  id    Int     @id @default(autoincrement())
  value String?

  @@map("origins")
}

model People {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  register          String
  birthday          String
  birthcityId       Int
  genderId          Int
  ovog              String
  nationalId        Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  address           PeopleAddress?
  contact           PeopleContact?
  education         PeopleEducation[]
  jobDegree         PeopleJobDegree[]
  jobLevel          PeopleJobLevel[]
  relation          PeopleRelation[]
  language          PeopleLanguage[]
  computer          PeopleComputer[]
  PeopleDoctor      PeopleDoctor[]
  PeopleTalent      PeopleTalent[]
  PeopleJobEduction PeopleJobEduction[]
  User              User[]
  Employee          Employee[]

  @@map("people")
}

model PeopleAddress {
  id            Int      @id @default(autoincrement())
  peopleId      Int      @unique
  sumId         Int      @unique
  provinceId    Int      @unique
  homeaddress   String?
  mobile        String?
  fax           String?
  email         String?  @unique
  postAddress   String?
  contactPerson String?
  contactMobile String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  people        People   @relation(fields: [peopleId], references: [id])
  sum           Sum      @relation(fields: [sumId], references: [id])
  province      Province @relation(fields: [provinceId], references: [id])

  @@map("peopleAddresses")
}

model PeopleComputer {
  id        Int      @id @default(autoincrement())
  peopleId  Int
  skillId   Int
  vote      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  people    People   @relation(fields: [peopleId], references: [id])

  @@map("peopleComputers")
}

model PeopleContact {
  id        Int      @id @default(autoincrement())
  peopleId  Int      @unique
  contactId Int
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  people    People   @relation(fields: [peopleId], references: [id])

  @@map("peopleContacts")
}

model PeopleDoctor {
  id        Int      @id @default(autoincrement())
  peopleId  Int
  degree    String?
  place     String?
  date      String?
  cerf      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  people    People   @relation(fields: [peopleId], references: [id])

  @@map("peopleDoctors")
}

model PeopleEducation {
  id        Int       @id @default(autoincrement())
  peopleId  Int
  school    String?
  start     DateTime? @db.Date
  end       DateTime? @db.Date
  cerf      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  people    People    @relation(fields: [peopleId], references: [id])

  @@map("peopleEducations")
}

model PeopleJobDegree {
  id           Int       @id @default(autoincrement())
  peopleId     Int
  degree       String?
  organization String?
  date         DateTime? @db.Date
  cerf         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  people       People    @relation(fields: [peopleId], references: [id])

  @@map("peopleJobDegrees")
}

model PeopleJobLevel {
  id        Int      @id @default(autoincrement())
  peopleId  Int
  name      String?
  degree    String?
  more      String?
  cerf      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  people    People   @relation(fields: [peopleId], references: [id])

  @@map("peopleJobLevels")
}

model PeopleLanguage {
  id         Int      @id @default(autoincrement())
  peopleId   Int
  languageId Int?
  skillId    Int?
  vote       Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  people     People   @relation(fields: [peopleId], references: [id])

  @@map("peopleLanguages")
}

model PeopleRelation {
  id         Int      @id @default(autoincrement())
  peopleId   Int
  relationId Int
  name       String?
  birthplace String?
  work       String?
  type       Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  people     People   @relation(fields: [peopleId], references: [id])

  @@map("peopleRelations")
}

model PeopleTalent {
  id        Int      @id @default(autoincrement())
  peopleId  Int
  talentId  Int
  vote      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  people    People   @relation(fields: [peopleId], references: [id])

  @@map("peopleTalents")
}

model PeopleJobEduction {
  id          Int      @id @default(autoincrement())
  peopleId    Int
  organizatin String
  start       DateTime
  duration    Int
  label       String
  cerf        String
  people      People   @relation(fields: [peopleId], references: [id])

  @@map("peopleJobEducation")
}

model Province {
  id            Int            @id @default(autoincrement())
  value         String?
  sums          Sum[]
  PeopleAddress PeopleAddress?

  @@map("provinces")
}

model Sum {
  id            Int            @id @default(autoincrement())
  value         String?
  provinceId    Int?
  province      Province?      @relation(fields: [provinceId], references: [id])
  PeopleAddress PeopleAddress?

  @@map("sums")
}

model Skill {
  id    Int    @id @default(autoincrement())
  value String
  code  String

  @@map("skills")
}

model SubData {
  id      Int     @id @default(autoincrement())
  groupId Int?
  value   String?

  @@map("subData")
}

model SubDataGroup {
  id    Int     @id @default(autoincrement())
  value String?

  @@map("subDataGroups")
}

model Technology {
  id    Int     @id @default(autoincrement())
  value String?
  code  Int?

  @@map("technologies")
}

model Relation {
  id    Int     @id @default(autoincrement())
  value String?

  @@map("relations")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String?
  refreshToken String?
  status       Int?
  peopleId     Int?
  companyId    Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  company      Company?   @relation(fields: [companyId], references: [id])
  people       People?    @relation(fields: [peopleId], references: [id])
  UserRole     UserRole[]

  @@map("users")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  roleId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])

  @@map("userRoles")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Json
  companyId   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserRole    UserRole[]
  RoleModule  RoleModule[]

  @@map("roles")
}

model RoleModule {
  id              Int           @id @default(autoincrement())
  moduleCompanyId Int           @unique
  roleId          Int           @unique
  read            Boolean
  update          Boolean
  write           Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  role            Role          @relation(fields: [roleId], references: [id])
  moduleCompany   ModuleCompany @relation(fields: [moduleCompanyId], references: [id])

  @@map("roleModules")
}

model ModuleCompany {
  id         Int          @id @default(autoincrement())
  moduleId   Int          @unique
  companyId  Int          @unique
  enable     Boolean
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  module     Module       @relation(fields: [moduleId], references: [id])
  RoleModule RoleModule[]

  @@map("moduleCompanies")
}

model Module {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ModuleCompany ModuleCompany[]

  @@map("modules")
}

// Company, Department, Position and Employee
model Company {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  doors       Door[]
  sensors     Sensor[]
  departments Department[]
  User        User[]

  @@map("companies")
}

model Department {
  id        Int          @id @default(autoincrement())
  parentId  Int?         @unique
  companyId Int
  name      String
  startdate DateTime
  enddate   DateTime?
  status    Int
  parent    Department?  @relation("DepartmentToParent", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentToParent")
  company   Company      @relation(fields: [companyId], references: [id])
  Position  Position[]

  @@map("departments")
}

model Position {
  id           Int        @id @default(autoincrement())
  name         String?
  departmentId Int        @unique
  status       Int?
  startdate    DateTime
  enddate      DateTime?
  Employee     Employee[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("positions")
}

model Employee {
  id         Int       @id @default(autoincrement())
  peopleId   Int       @unique
  positionId Int       @unique
  status     Int?
  startdate  DateTime
  enddate    DateTime?
  Position   Position  @relation(fields: [positionId], references: [id])
  People     People    @relation(fields: [peopleId], references: [id])

  @@map("employees")
}

/// Measurement, sensor and value
model Sensor {
  id           Int           @id @default(autoincrement())
  model        String
  brand        String
  range        String?
  sensorType   SensorType?   @relation(fields: [sensorTypeId], references: [id])
  sensorTypeId Int?
  company      Company?      @relation(fields: [companyId], references: [id])
  companyId    Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  SensorObject SensorObject?

  @@map("sensors")
}

model SensorType {
  id       Int      @id @default(autoincrement())
  typeName String?
  sensors  Sensor[]

  @@map("sensorTypes")
}

model SensorObject {
  id                      Int                      @id @default(autoincrement())
  name                    String
  sensorId                Int                      @unique
  description             String?
  companyId               Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  sensor                  Sensor?                  @relation(fields: [sensorId], references: [id])
  SensorObjectValue       SensorObjectValue[]
  MeasurementSensorObject MeasurementSensorObject?

  @@map("sensorObjects")
}

model SensorObjectValue {
  id             Int          @id @default(autoincrement())
  sensorObjectId Int
  value          Float?
  date           DateTime?
  sensorObject   SensorObject @relation(fields: [sensorObjectId], references: [id])

  @@map("sensorObjectValues")
}

model MeasurementObject {
  id                      Int                      @id @default(autoincrement())
  name                    String
  location                String?
  description             String?
  companyId               Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  MeasurementSensorObject MeasurementSensorObject?

  @@map("measurementObjects")
}

model MeasurementSensorObject {
  id                 Int               @id @default(autoincrement())
  measurmentObjectId Int               @unique
  sensorObjectId     Int               @unique
  companyId          Int
  measurementObject  MeasurementObject @relation(fields: [measurmentObjectId], references: [id])
  sensorObject       SensorObject      @relation(fields: [sensorObjectId], references: [id])

  @@map("measurementSensorObject")
}
